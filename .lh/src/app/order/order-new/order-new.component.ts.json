{
    "sourceFile": "src/app/order/order-new/order-new.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1703754861543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1703755296502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,14 @@\n import { Component, OnInit, inject } from '@angular/core';\n \n-import { ReactiveFormsModule, FormBuilder, Validators, FormControl, FormsModule } from '@angular/forms';\n+import { ReactiveFormsModule, FormBuilder, Validators, FormControl, FormsModule, FormArray, FormGroup } from '@angular/forms';\n import { MatInputModule } from '@angular/material/input';\n import { MatButtonModule } from '@angular/material/button';\n import { MatSelectModule } from '@angular/material/select';\n import { MatRadioModule } from '@angular/material/radio';\n import { MatCardModule } from '@angular/material/card';\n import { CommonModule } from '@angular/common';\n+import { MatIconModule } from '@angular/material/icon';\n \n \n @Component({\n   selector: 'app-order-new',\n@@ -21,28 +22,40 @@\n     MatRadioModule,\n     MatCardModule,\n     ReactiveFormsModule,\n     FormsModule,\n-    CommonModule\n+    CommonModule,\n+    MatIconModule\n   ]\n })\n export class OrderNewComponent implements OnInit {\n \n   private fb = inject(FormBuilder);\n-  addressForm = this.fb.group({\n-    company: null,\n-    firstName: [null, Validators.required],\n-    lastName: [null, Validators.required],\n-    address: [null, Validators.required],\n-    address2: null,\n-    city: [null, Validators.required],\n-    state: [null, Validators.required],\n-    postalCode: [null, Validators.compose([\n-      Validators.required, Validators.minLength(5), Validators.maxLength(5)])\n-    ],\n+  orderForm = this.fb.group({\n+    products: this.fb.array([]),\n+    paymentMethod: ['', Validators.required],\n     shipping: ['free', Validators.required]\n   });\n \n+  get productForms() {\n+    return this.orderForm.get('products') as FormArray;\n+  }\n+\n+  createProduct(): FormGroup {\n+    return this.fb.group({\n+      selectedProduct: ['', Validators.required],\n+      quantity: [1, [Validators.required, Validators.min(1)]]\n+    });\n+  }\n+\n+  addProduct() {\n+    this.productForms.push(this.createProduct());\n+  }\n+\n+  removeProduct(index: number) {\n+    this.productForms.removeAt(index);\n+  }\n+\n   quantity: number = 1;\n   filteredProducts: any[] = [];\n   productControl = new FormControl();\n   paymentMethods: string[] = ['Credit Card', 'PayPal', 'Cash on Delivery'];\n"
                },
                {
                    "date": 1703756543904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,16 +29,24 @@\n })\n export class OrderNewComponent implements OnInit {\n \n   private fb = inject(FormBuilder);\n-  orderForm = this.fb.group({\n-    products: this.fb.array([]),\n-    paymentMethod: ['', Validators.required],\n-    shipping: ['free', Validators.required]\n-  });\n+  // orderForm = this.fb.group({\n+  //   products: this.fb.array([this.product()]),\n+  //   paymentMethod: ['', Validators.required],\n+  //   shipping: ['free', Validators.required]\n+  // });\n \n+  product() {\n+    return this.fb.group({\n+      name: ['', [Validators.required]],\n+      id: ['', [Validators.required]],\n+      q: ['', [Validators.required]],\n+    })\n+  }\n+\n   get productForms() {\n-    return this.orderForm.get('products') as FormArray;\n+    return this.orderForm?.get('products') as FormArray;\n   }\n \n   createProduct(): FormGroup {\n     return this.fb.group({\n@@ -53,9 +61,9 @@\n \n   removeProduct(index: number) {\n     this.productForms.removeAt(index);\n   }\n-\n+  orderForm: FormGroup | any;\n   quantity: number = 1;\n   filteredProducts: any[] = [];\n   productControl = new FormControl();\n   paymentMethods: string[] = ['Credit Card', 'PayPal', 'Cash on Delivery'];\n@@ -69,19 +77,17 @@\n   ];\n \n   constructor() { }\n \n-   ngOnInit() {\n-    // Initialize the filteredProducts with the entire list of products\n-    this.filteredProducts = this.products.slice();\n+  ngOnInit() {\n+    // Initialize the form\n+    this.orderForm = this.fb.group({\n+      products: this.fb.array([]),\n+      paymentMethod: ['', Validators.required]\n+    });\n \n-    // Subscribe to changes in the product search input\n-    this.productControl.valueChanges.subscribe(value => {\n-      // Filter the products based on the search input\n-      this.filteredProducts = this.products.filter(product =>\n-        product.name.toLowerCase().includes(value.toLowerCase())\n-      );\n-    });\n+    // Add a default product to the form array\n+    this.addProduct();\n   }\n \n   onSubmit(): void {\n      // Add your logic for handling the submitted order here\n"
                },
                {
                    "date": 1703757022269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import { Component, OnInit, inject } from '@angular/core';\n+\n+import { ReactiveFormsModule, FormBuilder, Validators, FormControl, FormsModule, FormArray, FormGroup } from '@angular/forms';\n+import { MatInputModule } from '@angular/material/input';\n+import { MatButtonModule } from '@angular/material/button';\n+import { MatSelectModule } from '@angular/material/select';\n+import { MatRadioModule } from '@angular/material/radio';\n+import { MatCardModule } from '@angular/material/card';\n+import { CommonModule } from '@angular/common';\n+import { MatIconModule } from '@angular/material/icon';\n+\n+\n+@Component({\n+  selector: 'app-order-new',\n+  templateUrl: './order-new.component.html',\n+  styleUrls: ['./order-new.component.css'],\n+  standalone: true,\n+  imports: [\n+    MatInputModule,\n+    MatButtonModule,\n+    MatSelectModule,\n+    MatRadioModule,\n+    MatCardModule,\n+    ReactiveFormsModule,\n+    FormsModule,\n+    CommonModule,\n+    MatIconModule\n+  ]\n+})\n+export class OrderNewComponent implements OnInit {\n+\n+  private fb = inject(FormBuilder);\n+  // orderForm = this.fb.group({\n+  //   products: this.fb.array([this.product()]),\n+  //   paymentMethod: ['', Validators.required],\n+  //   shipping: ['free', Validators.required]\n+  // });\n+\n+  product() {\n+    return this.fb.group({\n+      name: ['', [Validators.required]],\n+      id: ['', [Validators.required]],\n+      q: ['', [Validators.required]],\n+    })\n+  }\n+\n+  get productForms() {\n+    return this.orderForm?.get('products') as FormArray;\n+  }\n+\n+  createProduct(): FormGroup {\n+    return this.fb.group({\n+      selectedProduct: ['', Validators.required],\n+      quantity: [1, [Validators.required, Validators.min(1)]]\n+    });\n+  }\n+\n+  addProduct() {\n+    this.productForms.push(this.createProduct());\n+  }\n+\n+  removeProduct(index: number) {\n+    this.productForms.removeAt(index);\n+  }\n+  orderForm: FormGroup | any;\n+  quantity: number = 1;\n+  filteredProducts: any[] = [];\n+  productControl = new FormControl();\n+  paymentMethods: string[] = ['Credit Card', 'PayPal', 'Cash on Delivery'];\n+  selectedPaymentMethod: string = '';\n+  selectedProduct: any;\n+\n+  products: any[] = [\n+    { id: 1, name: 'Product A' },\n+    { id: 2, name: 'Product B' },\n+    { id: 3, name: 'Product C' }\n+  ];\n+\n+  constructor() { }\n+\n+  ngOnInit() {\n+    // Initialize the form\n+    this.orderForm = this.fb.group({\n+      products: this.fb.array([]),\n+      paymentMethod: ['', Validators.required],\n+      shipping: ['free', Validators.required]\n+    });\n+\n+    // Add a default product to the form array\n+    this.addProduct();\n+  }\n+\n+  onSubmit(): void {\n+     // Add your logic for handling the submitted order here\n+     console.log('Order Submitted:', {\n+      product: this.selectedProduct,\n+      quantity: this.quantity,\n+      paymentMethod: this.selectedPaymentMethod\n+    });\n+    alert('Thanks!');\n+  }\n+}\n"
                },
                {
                    "date": 1703757343628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,40 +29,9 @@\n })\n export class OrderNewComponent implements OnInit {\n \n   private fb = inject(FormBuilder);\n-  // orderForm = this.fb.group({\n-  //   products: this.fb.array([this.product()]),\n-  //   paymentMethod: ['', Validators.required],\n-  //   shipping: ['free', Validators.required]\n-  // });\n \n-  product() {\n-    return this.fb.group({\n-      name: ['', [Validators.required]],\n-      id: ['', [Validators.required]],\n-      q: ['', [Validators.required]],\n-    })\n-  }\n-\n-  get productForms() {\n-    return this.orderForm?.get('products') as FormArray;\n-  }\n-\n-  createProduct(): FormGroup {\n-    return this.fb.group({\n-      selectedProduct: ['', Validators.required],\n-      quantity: [1, [Validators.required, Validators.min(1)]]\n-    });\n-  }\n-\n-  addProduct() {\n-    this.productForms.push(this.createProduct());\n-  }\n-\n-  removeProduct(index: number) {\n-    this.productForms.removeAt(index);\n-  }\n   orderForm: FormGroup | any;\n   quantity: number = 1;\n   filteredProducts: any[] = [];\n   productControl = new FormControl();\n@@ -89,64 +58,8 @@\n     // Add a default product to the form array\n     this.addProduct();\n   }\n \n-  onSubmit(): void {\n-     // Add your logic for handling the submitted order here\n-     console.log('Order Submitted:', {\n-      product: this.selectedProduct,\n-      quantity: this.quantity,\n-      paymentMethod: this.selectedPaymentMethod\n-    });\n-    alert('Thanks!');\n-  }\n-}\n-import { Component, OnInit, inject } from '@angular/core';\n-\n-import { ReactiveFormsModule, FormBuilder, Validators, FormControl, FormsModule, FormArray, FormGroup } from '@angular/forms';\n-import { MatInputModule } from '@angular/material/input';\n-import { MatButtonModule } from '@angular/material/button';\n-import { MatSelectModule } from '@angular/material/select';\n-import { MatRadioModule } from '@angular/material/radio';\n-import { MatCardModule } from '@angular/material/card';\n-import { CommonModule } from '@angular/common';\n-import { MatIconModule } from '@angular/material/icon';\n-\n-\n-@Component({\n-  selector: 'app-order-new',\n-  templateUrl: './order-new.component.html',\n-  styleUrls: ['./order-new.component.css'],\n-  standalone: true,\n-  imports: [\n-    MatInputModule,\n-    MatButtonModule,\n-    MatSelectModule,\n-    MatRadioModule,\n-    MatCardModule,\n-    ReactiveFormsModule,\n-    FormsModule,\n-    CommonModule,\n-    MatIconModule\n-  ]\n-})\n-export class OrderNewComponent implements OnInit {\n-\n-  private fb = inject(FormBuilder);\n-  // orderForm = this.fb.group({\n-  //   products: this.fb.array([this.product()]),\n-  //   paymentMethod: ['', Validators.required],\n-  //   shipping: ['free', Validators.required]\n-  // });\n-\n-  product() {\n-    return this.fb.group({\n-      name: ['', [Validators.required]],\n-      id: ['', [Validators.required]],\n-      q: ['', [Validators.required]],\n-    })\n-  }\n-\n   get productForms() {\n     return this.orderForm?.get('products') as FormArray;\n   }\n \n@@ -163,41 +76,14 @@\n \n   removeProduct(index: number) {\n     this.productForms.removeAt(index);\n   }\n-  orderForm: FormGroup | any;\n-  quantity: number = 1;\n-  filteredProducts: any[] = [];\n-  productControl = new FormControl();\n-  paymentMethods: string[] = ['Credit Card', 'PayPal', 'Cash on Delivery'];\n-  selectedPaymentMethod: string = '';\n-  selectedProduct: any;\n \n-  products: any[] = [\n-    { id: 1, name: 'Product A' },\n-    { id: 2, name: 'Product B' },\n-    { id: 3, name: 'Product C' }\n-  ];\n-\n-  constructor() { }\n-\n-  ngOnInit() {\n-    // Initialize the form\n-    this.orderForm = this.fb.group({\n-      products: this.fb.array([]),\n-      paymentMethod: ['', Validators.required]\n-    });\n-\n-    // Add a default product to the form array\n-    this.addProduct();\n-  }\n-\n   onSubmit(): void {\n      // Add your logic for handling the submitted order here\n      console.log('Order Submitted:', {\n       product: this.selectedProduct,\n       quantity: this.quantity,\n       paymentMethod: this.selectedPaymentMethod\n     });\n-    alert('Thanks!');\n   }\n }\n"
                },
                {
                    "date": 1703757644931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,10 @@\n     // Initialize the form\n     this.orderForm = this.fb.group({\n       products: this.fb.array([]),\n       paymentMethod: ['', Validators.required],\n-      shipping: ['free', Validators.required]\n+      shipping: ['free', Validators.required],\n+      lastName: ['', Validators.required]\n     });\n \n     // Add a default product to the form array\n     this.addProduct();\n"
                },
                {
                    "date": 1703757788127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     // Initialize the form\n     this.orderForm = this.fb.group({\n       products: this.fb.array([]),\n       paymentMethod: ['', Validators.required],\n-      shipping: ['free', Validators.required],\n+      shipping: ['free'],\n       lastName: ['', Validators.required]\n     });\n \n     // Add a default product to the form array\n"
                },
                {
                    "date": 1703757833767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,10 +50,10 @@\n   ngOnInit() {\n     // Initialize the form\n     this.orderForm = this.fb.group({\n       products: this.fb.array([]),\n-      paymentMethod: ['', Validators.required],\n-      shipping: ['free'],\n+      paymentMethod: [''],\n+      shipping: ['free', Validators.required],\n       lastName: ['', Validators.required]\n     });\n \n     // Add a default product to the form array\n"
                },
                {
                    "date": 1703757919135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,11 +50,10 @@\n   ngOnInit() {\n     // Initialize the form\n     this.orderForm = this.fb.group({\n       products: this.fb.array([]),\n-      paymentMethod: [''],\n-      shipping: ['free', Validators.required],\n-      lastName: ['', Validators.required]\n+      paymentMethod: ['', Validators.required],\n+      shipping: ['free', Validators.required]\n     });\n \n     // Add a default product to the form array\n     this.addProduct();\n"
                },
                {
                    "date": 1703760077602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n   }\n \n   createProduct(): FormGroup {\n     return this.fb.group({\n-      selectedProduct: ['', Validators.required],\n+      product: ['', Validators.required],\n       quantity: [1, [Validators.required, Validators.min(1)]]\n     });\n   }\n \n@@ -79,11 +79,7 @@\n   }\n \n   onSubmit(): void {\n      // Add your logic for handling the submitted order here\n-     console.log('Order Submitted:', {\n-      product: this.selectedProduct,\n-      quantity: this.quantity,\n-      paymentMethod: this.selectedPaymentMethod\n-    });\n+     console.log('Order Submitted:', this.orderForm.value);\n   }\n }\n"
                },
                {
                    "date": 1704177784138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import { MatRadioModule } from '@angular/material/radio';\n import { MatCardModule } from '@angular/material/card';\n import { CommonModule } from '@angular/common';\n import { MatIconModule } from '@angular/material/icon';\n+import { RouterLink } from '@angular/router';\n \n \n @Component({\n   selector: 'app-order-new',\n@@ -23,9 +24,10 @@\n     MatCardModule,\n     ReactiveFormsModule,\n     FormsModule,\n     CommonModule,\n-    MatIconModule\n+    MatIconModule,\n+    RouterLink\n   ]\n })\n export class OrderNewComponent implements OnInit {\n \n"
                },
                {
                    "date": 1704178239518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+import { Component, OnInit, inject } from '@angular/core';\n+\n+import { ReactiveFormsModule, FormBuilder, Validators, FormControl, FormsModule, FormArray, FormGroup } from '@angular/forms';\n+import { MatInputModule } from '@angular/material/input';\n+import { MatButtonModule } from '@angular/material/button';\n+import { MatSelectModule } from '@angular/material/select';\n+import { MatRadioModule } from '@angular/material/radio';\n+import { MatCardModule } from '@angular/material/card';\n+import { CommonModule } from '@angular/common';\n+import { MatIconModule } from '@angular/material/icon';\n+import { RouterLink } from '@angular/router';\n+\n+\n+@Component({\n+  selector: 'app-order-new',\n+  templateUrl: './order-new.component.html',\n+  styleUrls: ['./order-new.component.css'],\n+  standalone: true,\n+  imports: [\n+    MatInputModule,\n+    MatButtonModule,\n+    MatSelectModule,\n+    MatRadioModule,\n+    MatCardModule,\n+    ReactiveFormsModule,\n+    FormsModule,\n+    CommonModule,\n+    MatIconModule,\n+    RouterLink\n+  ]\n+})\n+export class OrderNewComponent implements OnInit {\n+\n+  private fb = inject(FormBuilder);\n+\n+  orderForm: FormGroup | any;\n+  quantity: number = 1;\n+  filteredProducts: any[] = [];\n+  productControl = new FormControl();\n+  paymentMethods: string[] = ['Credit Card', 'PayPal', 'Cash on Delivery'];\n+  users: string[] = ['user1', 'user2', 'user3'];\n+  selectedPaymentMethod: string = '';\n+  selectedProduct: any;\n+\n+  products: any[] = [\n+    { id: 1, name: 'Product A' },\n+    { id: 2, name: 'Product B' },\n+    { id: 3, name: 'Product C' }\n+  ];\n+\n+  constructor() { }\n+\n+  ngOnInit() {\n+    // Initialize the form\n+    this.orderForm = this.fb.group({\n+      products: this.fb.array([]),\n+      paymentMethod: ['', Validators.required],\n+      orderBy: ['', Validators.required],\n+      shipping: ['free', Validators.required]\n+    });\n+\n+    // Add a default product to the form array\n+    this.addProduct();\n+  }\n+\n+  get productForms() {\n+    return this.orderForm?.get('products') as FormArray;\n+  }\n+\n+  createProduct(): FormGroup {\n+    return this.fb.group({\n+      product: ['', Validators.required],\n+      quantity: [1, [Validators.required, Validators.min(1)]]\n+    });\n+  }\n+\n+  addProduct() {\n+    this.productForms.push(this.createProduct());\n+  }\n+\n+  removeProduct(index: number) {\n+    this.productForms.removeAt(index);\n+  }\n+\n+  onSubmit(): void {\n+     // Add your logic for handling the submitted order here\n+     console.log('Order Submitted:', this.orderForm.value);\n+  }\n+}\n"
                },
                {
                    "date": 1704178417628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,8 @@\n     // Initialize the form\n     this.orderForm = this.fb.group({\n       products: this.fb.array([]),\n       paymentMethod: ['', Validators.required],\n-      orderBy: ['', Validators.required],\n       shipping: ['free', Validators.required]\n     });\n \n     // Add a default product to the form array\n@@ -86,91 +85,4 @@\n      // Add your logic for handling the submitted order here\n      console.log('Order Submitted:', this.orderForm.value);\n   }\n }\n-import { Component, OnInit, inject } from '@angular/core';\n-\n-import { ReactiveFormsModule, FormBuilder, Validators, FormControl, FormsModule, FormArray, FormGroup } from '@angular/forms';\n-import { MatInputModule } from '@angular/material/input';\n-import { MatButtonModule } from '@angular/material/button';\n-import { MatSelectModule } from '@angular/material/select';\n-import { MatRadioModule } from '@angular/material/radio';\n-import { MatCardModule } from '@angular/material/card';\n-import { CommonModule } from '@angular/common';\n-import { MatIconModule } from '@angular/material/icon';\n-import { RouterLink } from '@angular/router';\n-\n-\n-@Component({\n-  selector: 'app-order-new',\n-  templateUrl: './order-new.component.html',\n-  styleUrls: ['./order-new.component.css'],\n-  standalone: true,\n-  imports: [\n-    MatInputModule,\n-    MatButtonModule,\n-    MatSelectModule,\n-    MatRadioModule,\n-    MatCardModule,\n-    ReactiveFormsModule,\n-    FormsModule,\n-    CommonModule,\n-    MatIconModule,\n-    RouterLink\n-  ]\n-})\n-export class OrderNewComponent implements OnInit {\n-\n-  private fb = inject(FormBuilder);\n-\n-  orderForm: FormGroup | any;\n-  quantity: number = 1;\n-  filteredProducts: any[] = [];\n-  productControl = new FormControl();\n-  paymentMethods: string[] = ['Credit Card', 'PayPal', 'Cash on Delivery'];\n-  selectedPaymentMethod: string = '';\n-  selectedProduct: any;\n-\n-  products: any[] = [\n-    { id: 1, name: 'Product A' },\n-    { id: 2, name: 'Product B' },\n-    { id: 3, name: 'Product C' }\n-  ];\n-\n-  constructor() { }\n-\n-  ngOnInit() {\n-    // Initialize the form\n-    this.orderForm = this.fb.group({\n-      products: this.fb.array([]),\n-      paymentMethod: ['', Validators.required],\n-      shipping: ['free', Validators.required]\n-    });\n-\n-    // Add a default product to the form array\n-    this.addProduct();\n-  }\n-\n-  get productForms() {\n-    return this.orderForm?.get('products') as FormArray;\n-  }\n-\n-  createProduct(): FormGroup {\n-    return this.fb.group({\n-      product: ['', Validators.required],\n-      quantity: [1, [Validators.required, Validators.min(1)]]\n-    });\n-  }\n-\n-  addProduct() {\n-    this.productForms.push(this.createProduct());\n-  }\n-\n-  removeProduct(index: number) {\n-    this.productForms.removeAt(index);\n-  }\n-\n-  onSubmit(): void {\n-     // Add your logic for handling the submitted order here\n-     console.log('Order Submitted:', this.orderForm.value);\n-  }\n-}\n"
                },
                {
                    "date": 1704178457734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,9 @@\n     // Initialize the form\n     this.orderForm = this.fb.group({\n       products: this.fb.array([]),\n       paymentMethod: ['', Validators.required],\n+      orderBy: [''],\n       shipping: ['free', Validators.required]\n     });\n \n     // Add a default product to the form array\n"
                },
                {
                    "date": 1704189223523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n   paymentMethods: string[] = ['Credit Card', 'PayPal', 'Cash on Delivery'];\n   users: string[] = ['user1', 'user2', 'user3'];\n   selectedPaymentMethod: string = '';\n   selectedProduct: any;\n+  orderTotal: number = 0;\n \n   products: any[] = [\n     { id: 1, name: 'Product A' },\n     { id: 2, name: 'Product B' },\n"
                },
                {
                    "date": 1704189378705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,11 +43,11 @@\n   selectedProduct: any;\n   orderTotal: number = 0;\n \n   products: any[] = [\n-    { id: 1, name: 'Product A' },\n-    { id: 2, name: 'Product B' },\n-    { id: 3, name: 'Product C' }\n+    { id: 1, name: 'Product A', price: 230 },\n+    { id: 2, name: 'Product B' , price: 500},\n+    { id: 3, name: 'Product C', price: 1000 }\n   ];\n \n   constructor() { }\n \n"
                }
            ],
            "date": 1703754861543,
            "name": "Commit-0",
            "content": "import { Component, OnInit, inject } from '@angular/core';\n\nimport { ReactiveFormsModule, FormBuilder, Validators, FormControl, FormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatCardModule } from '@angular/material/card';\nimport { CommonModule } from '@angular/common';\n\n\n@Component({\n  selector: 'app-order-new',\n  templateUrl: './order-new.component.html',\n  styleUrls: ['./order-new.component.css'],\n  standalone: true,\n  imports: [\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatCardModule,\n    ReactiveFormsModule,\n    FormsModule,\n    CommonModule\n  ]\n})\nexport class OrderNewComponent implements OnInit {\n\n  private fb = inject(FormBuilder);\n  addressForm = this.fb.group({\n    company: null,\n    firstName: [null, Validators.required],\n    lastName: [null, Validators.required],\n    address: [null, Validators.required],\n    address2: null,\n    city: [null, Validators.required],\n    state: [null, Validators.required],\n    postalCode: [null, Validators.compose([\n      Validators.required, Validators.minLength(5), Validators.maxLength(5)])\n    ],\n    shipping: ['free', Validators.required]\n  });\n\n  quantity: number = 1;\n  filteredProducts: any[] = [];\n  productControl = new FormControl();\n  paymentMethods: string[] = ['Credit Card', 'PayPal', 'Cash on Delivery'];\n  selectedPaymentMethod: string = '';\n  selectedProduct: any;\n\n  products: any[] = [\n    { id: 1, name: 'Product A' },\n    { id: 2, name: 'Product B' },\n    { id: 3, name: 'Product C' }\n  ];\n\n  constructor() { }\n\n   ngOnInit() {\n    // Initialize the filteredProducts with the entire list of products\n    this.filteredProducts = this.products.slice();\n\n    // Subscribe to changes in the product search input\n    this.productControl.valueChanges.subscribe(value => {\n      // Filter the products based on the search input\n      this.filteredProducts = this.products.filter(product =>\n        product.name.toLowerCase().includes(value.toLowerCase())\n      );\n    });\n  }\n\n  onSubmit(): void {\n     // Add your logic for handling the submitted order here\n     console.log('Order Submitted:', {\n      product: this.selectedProduct,\n      quantity: this.quantity,\n      paymentMethod: this.selectedPaymentMethod\n    });\n    alert('Thanks!');\n  }\n}\n"
        }
    ]
}